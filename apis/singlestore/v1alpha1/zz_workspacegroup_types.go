// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WorkspaceGroupInitParameters struct {

	// (String, Sensitive) The admin SQL user password for the workspace group. If not provided, the server will automatically generate a secure password. Please note that updates to the admin password might take a brief moment to become effective.
	// The admin SQL user password for the workspace group. If not provided, the server will automatically generate a secure password. Please note that updates to the admin password might take a brief moment to become effective.
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// 01-02T15:04:05Z".
	// The expiration timestamp of the workspace group. If not specified, the workspace group never expires. Upon expiration, the workspace group is terminated and all its data is lost. Set the expiration time as an RFC3339 UTC timestamp, e.g., "2221-01-02T15:04:05Z".
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (List of String) List of allowed CIDR ranges. An empty list blocks all inbound requests. For unrestricted traffic, use ["0.0.0.0/0"]. Note that updates to firewall ranges may take a brief moment to become effective.
	// List of allowed CIDR ranges. An empty list blocks all inbound requests. For unrestricted traffic, use ["0.0.0.0/0"]. Note that updates to firewall ranges may take a brief moment to become effective.
	FirewallRanges []*string `json:"firewallRanges,omitempty" tf:"firewall_ranges,omitempty"`

	// (String) Name of the workspace group.
	// Name of the workspace group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The unique identifier of the region where the workspace group is to be created.
	// The unique identifier of the region where the workspace group is to be created.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`
}

type WorkspaceGroupObservation struct {

	// (String) The timestamp when the workspace was created.
	// The timestamp when the workspace was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// 01-02T15:04:05Z".
	// The expiration timestamp of the workspace group. If not specified, the workspace group never expires. Upon expiration, the workspace group is terminated and all its data is lost. Set the expiration time as an RFC3339 UTC timestamp, e.g., "2221-01-02T15:04:05Z".
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (List of String) List of allowed CIDR ranges. An empty list blocks all inbound requests. For unrestricted traffic, use ["0.0.0.0/0"]. Note that updates to firewall ranges may take a brief moment to become effective.
	// List of allowed CIDR ranges. An empty list blocks all inbound requests. For unrestricted traffic, use ["0.0.0.0/0"]. Note that updates to firewall ranges may take a brief moment to become effective.
	FirewallRanges []*string `json:"firewallRanges,omitempty" tf:"firewall_ranges,omitempty"`

	// (String) The unique identifier of the workspace group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the workspace group.
	// Name of the workspace group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The unique identifier of the region where the workspace group is to be created.
	// The unique identifier of the region where the workspace group is to be created.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`
}

type WorkspaceGroupParameters struct {

	// (String, Sensitive) The admin SQL user password for the workspace group. If not provided, the server will automatically generate a secure password. Please note that updates to the admin password might take a brief moment to become effective.
	// The admin SQL user password for the workspace group. If not provided, the server will automatically generate a secure password. Please note that updates to the admin password might take a brief moment to become effective.
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// 01-02T15:04:05Z".
	// The expiration timestamp of the workspace group. If not specified, the workspace group never expires. Upon expiration, the workspace group is terminated and all its data is lost. Set the expiration time as an RFC3339 UTC timestamp, e.g., "2221-01-02T15:04:05Z".
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (List of String) List of allowed CIDR ranges. An empty list blocks all inbound requests. For unrestricted traffic, use ["0.0.0.0/0"]. Note that updates to firewall ranges may take a brief moment to become effective.
	// List of allowed CIDR ranges. An empty list blocks all inbound requests. For unrestricted traffic, use ["0.0.0.0/0"]. Note that updates to firewall ranges may take a brief moment to become effective.
	// +kubebuilder:validation:Optional
	FirewallRanges []*string `json:"firewallRanges,omitempty" tf:"firewall_ranges,omitempty"`

	// (String) Name of the workspace group.
	// Name of the workspace group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The unique identifier of the region where the workspace group is to be created.
	// The unique identifier of the region where the workspace group is to be created.
	// +kubebuilder:validation:Optional
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`
}

// WorkspaceGroupSpec defines the desired state of WorkspaceGroup
type WorkspaceGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkspaceGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkspaceGroupInitParameters `json:"initProvider,omitempty"`
}

// WorkspaceGroupStatus defines the observed state of WorkspaceGroup.
type WorkspaceGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkspaceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WorkspaceGroup is the Schema for the WorkspaceGroups API. Manage SingleStoreDB workspace groups with this resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,singlestore}
type WorkspaceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firewallRanges) || (has(self.initProvider) && has(self.initProvider.firewallRanges))",message="spec.forProvider.firewallRanges is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionId) || (has(self.initProvider) && has(self.initProvider.regionId))",message="spec.forProvider.regionId is a required parameter"
	Spec   WorkspaceGroupSpec   `json:"spec"`
	Status WorkspaceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceGroupList contains a list of WorkspaceGroups
type WorkspaceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkspaceGroup `json:"items"`
}

// Repository type metadata.
var (
	WorkspaceGroup_Kind             = "WorkspaceGroup"
	WorkspaceGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkspaceGroup_Kind}.String()
	WorkspaceGroup_KindAPIVersion   = WorkspaceGroup_Kind + "." + CRDGroupVersion.String()
	WorkspaceGroup_GroupVersionKind = CRDGroupVersion.WithKind(WorkspaceGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkspaceGroup{}, &WorkspaceGroupList{})
}
