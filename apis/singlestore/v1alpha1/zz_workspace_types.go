// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WorkspaceInitParameters struct {

	// (Boolean) Whether the Kai API is enabled for the workspace.
	// Whether the Kai API is enabled for the workspace.
	KaiEnabled *bool `json:"kaiEnabled,omitempty" tf:"kai_enabled,omitempty"`

	// (String) The name assigned to the workspace.
	// The name assigned to the workspace.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// 00, S-0, S-1, S-2).
	// The size of the workspace, specified in workspace size notation (S-00, S-0, S-1, S-2).
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// (Boolean) The status of the workspace. If true, the workspace is suspended.
	// The status of the workspace. If true, the workspace is suspended.
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// (String) The unique identifier of the workspace group that the workspace belongs to.
	// The unique identifier of the workspace group that the workspace belongs to.
	// +crossplane:generate:reference:type=github.com/terasky-oss/provider-singlestore/apis/singlestore/v1alpha1.WorkspaceGroup
	WorkspaceGroupID *string `json:"workspaceGroupId,omitempty" tf:"workspace_group_id,omitempty"`

	// Reference to a WorkspaceGroup in singlestore to populate workspaceGroupId.
	// +kubebuilder:validation:Optional
	WorkspaceGroupIDRef *v1.Reference `json:"workspaceGroupIdRef,omitempty" tf:"-"`

	// Selector for a WorkspaceGroup in singlestore to populate workspaceGroupId.
	// +kubebuilder:validation:Optional
	WorkspaceGroupIDSelector *v1.Selector `json:"workspaceGroupIdSelector,omitempty" tf:"-"`
}

type WorkspaceObservation struct {

	// (String) The timestamp when the workspace was created.
	// The timestamp when the workspace was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The endpoint used to connect to the workspace.
	// The endpoint used to connect to the workspace.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (String) The unique identifier of the workspace.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Whether the Kai API is enabled for the workspace.
	// Whether the Kai API is enabled for the workspace.
	KaiEnabled *bool `json:"kaiEnabled,omitempty" tf:"kai_enabled,omitempty"`

	// (String) The name assigned to the workspace.
	// The name assigned to the workspace.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// 00, S-0, S-1, S-2).
	// The size of the workspace, specified in workspace size notation (S-00, S-0, S-1, S-2).
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// (Boolean) The status of the workspace. If true, the workspace is suspended.
	// The status of the workspace. If true, the workspace is suspended.
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// (String) The unique identifier of the workspace group that the workspace belongs to.
	// The unique identifier of the workspace group that the workspace belongs to.
	WorkspaceGroupID *string `json:"workspaceGroupId,omitempty" tf:"workspace_group_id,omitempty"`
}

type WorkspaceParameters struct {

	// (Boolean) Whether the Kai API is enabled for the workspace.
	// Whether the Kai API is enabled for the workspace.
	// +kubebuilder:validation:Optional
	KaiEnabled *bool `json:"kaiEnabled,omitempty" tf:"kai_enabled,omitempty"`

	// (String) The name assigned to the workspace.
	// The name assigned to the workspace.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// 00, S-0, S-1, S-2).
	// The size of the workspace, specified in workspace size notation (S-00, S-0, S-1, S-2).
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// (Boolean) The status of the workspace. If true, the workspace is suspended.
	// The status of the workspace. If true, the workspace is suspended.
	// +kubebuilder:validation:Optional
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// (String) The unique identifier of the workspace group that the workspace belongs to.
	// The unique identifier of the workspace group that the workspace belongs to.
	// +crossplane:generate:reference:type=github.com/terasky-oss/provider-singlestore/apis/singlestore/v1alpha1.WorkspaceGroup
	// +kubebuilder:validation:Optional
	WorkspaceGroupID *string `json:"workspaceGroupId,omitempty" tf:"workspace_group_id,omitempty"`

	// Reference to a WorkspaceGroup in singlestore to populate workspaceGroupId.
	// +kubebuilder:validation:Optional
	WorkspaceGroupIDRef *v1.Reference `json:"workspaceGroupIdRef,omitempty" tf:"-"`

	// Selector for a WorkspaceGroup in singlestore to populate workspaceGroupId.
	// +kubebuilder:validation:Optional
	WorkspaceGroupIDSelector *v1.Selector `json:"workspaceGroupIdSelector,omitempty" tf:"-"`
}

// WorkspaceSpec defines the desired state of Workspace
type WorkspaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkspaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkspaceInitParameters `json:"initProvider,omitempty"`
}

// WorkspaceStatus defines the observed state of Workspace.
type WorkspaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Workspace is the Schema for the Workspaces API. This resource enables the management of SingleStoreDB workspaces.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,singlestore}
type Workspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   WorkspaceSpec   `json:"spec"`
	Status WorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceList contains a list of Workspaces
type WorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workspace `json:"items"`
}

// Repository type metadata.
var (
	Workspace_Kind             = "Workspace"
	Workspace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Workspace_Kind}.String()
	Workspace_KindAPIVersion   = Workspace_Kind + "." + CRDGroupVersion.String()
	Workspace_GroupVersionKind = CRDGroupVersion.WithKind(Workspace_Kind)
)

func init() {
	SchemeBuilder.Register(&Workspace{}, &WorkspaceList{})
}
